/*
  ==============================================================================

    TUICommon.cpp
    Created: 7 Aug 2020 4:47:26pm
    Author:  user

  ==============================================================================
*/

#include "TUICommon.h"










DrawablePath * getThumbnailPath(const int type, const bool on, const bool over)
{
	DrawablePath * drawable = new DrawablePath();

	Path path;

	static const unsigned char pathData[] = { 110,109,131,192,78,66,0,0,168,64,98,68,11,57,66,191,125,163,64,240,167,31,66,68,139,144,65,0,128,32,66,0,0,237,65,98,45,178,32,66,123,148,4,66,215,35,37,66,209,34,33,66,190,159,43,66,0,0,69,66,98,100,187,2,66,242,82,111,66,249,126,166,65,72,97,141,66,
	249,126,166,65,66,224,169,66,98,38,49,165,65,113,253,195,66,48,8,229,65,144,66,229,66,124,63,62,66,164,240,228,66,98,58,223,73,66,103,230,228,66,253,84,84,66,21,46,228,66,190,159,93,66,164,240,226,66,98,73,140,100,66,133,235,245,66,233,38,105,66,51,115,
	2,67,190,31,105,66,246,232,5,67,98,53,94,105,66,205,140,19,67,26,175,33,66,103,230,20,67,124,63,30,66,92,15,13,67,98,34,91,45,66,20,238,12,67,65,96,57,66,20,238,9,67,65,96,57,66,82,56,6,67,98,65,96,57,66,21,110,2,67,241,210,44,66,21,174,254,66,124,63,
	29,66,21,174,254,66,98,26,175,20,66,21,174,254,66,79,13,13,66,174,71,0,67,65,224,7,66,0,192,1,67,98,137,193,7,66,174,199,1,67,178,157,7,66,92,207,1,67,255,127,7,66,10,215,1,67,98,253,84,6,66,102,38,2,67,22,89,5,66,30,133,2,67,65,96,4,66,164,240,2,67,
	98,26,47,1,66,62,74,4,67,87,57,254,65,225,58,6,67,255,255,253,65,0,0,9,67,98,255,255,253,65,133,107,20,67,0,128,114,66,31,197,27,67,0,128,114,66,0,64,5,67,98,20,174,114,66,82,56,2,67,207,119,109,66,92,15,245,66,66,224,101,66,20,174,225,66,98,222,36,156,
	66,174,199,210,66,193,202,145,66,153,153,149,66,132,192,87,66,223,79,149,66,98,60,223,81,66,141,87,149,66,58,52,76,66,26,175,149,66,132,192,70,66,65,96,150,66,98,152,110,66,66,100,251,139,66,150,67,62,66,221,228,129,66,191,159,58,66,124,63,113,66,98,
	134,107,87,66,200,246,84,66,99,144,112,66,28,90,48,66,0,0,112,66,130,192,217,65,98,135,22,112,66,18,174,113,65,170,241,95,66,16,131,172,64,131,192,78,66,252,255,167,64,99,109,65,224,83,66,131,192,135,65,98,51,179,93,66,35,219,133,65,0,128,101,66,147,
	24,152,65,0,128,101,66,125,63,192,65,98,199,75,102,66,160,154,2,66,215,35,78,66,76,183,32,66,66,96,49,66,0,0,63,66,98,191,159,46,66,121,105,46,66,236,209,44,66,213,248,32,66,191,159,44,66,0,0,25,66,98,164,112,45,66,162,69,198,65,0,128,67,66,121,233,138,
	65,66,224,83,66,131,192,135,65,99,109,0,0,53,66,190,159,118,66,98,12,130,56,66,141,87,132,66,199,75,60,66,35,219,141,66,190,31,64,66,32,112,151,66,98,151,238,13,66,177,93,160,66,32,176,235,65,147,88,195,66,0,0,61,66,255,255,210,66,98,196,160,17,66,185,
	137,192,66,219,249,38,66,26,175,170,66,125,63,70,66,64,224,166,66,98,172,28,78,66,11,130,186,66,193,202,85,66,70,225,205,66,0,0,92,66,183,158,222,66,98,111,146,83,66,152,25,224,66,106,188,73,66,193,245,224,66,125,63,62,66,255,255,224,66,98,37,134,33,
	66,255,255,224,66,125,63,208,65,40,220,215,66,125,63,208,65,255,63,181,66,98,125,63,208,65,17,67,152,66,223,79,16,66,99,123,140,66,0,0,53,66,188,159,118,66,99,109,66,96,77,66,0,64,166,66,98,197,160,78,66,70,54,166,66,232,251,79,66,94,58,166,66,125,63,
	81,66,0,64,166,66,98,0,192,130,66,0,64,166,66,160,154,140,66,113,189,207,66,0,0,100,66,0,0,221,66,98,72,97,93,66,41,92,204,66,29,90,85,66,174,71,185,66,66,96,77,66,0,64,166,66,99,101,0,0 };

	path.loadPathFromData(pathData, sizeof(pathData));


	drawable->setPath(path);

	if (on)
	{
		if (over)
			drawable->setFill(FillType(Colour(0xffcccccc)));
		else
			drawable->setFill(FillType(Colour(0xff999999)));
	}
	else
	{
		if (over)
			drawable->setFill(FillType(Colour(0xff999999)));
		else
			drawable->setFill(FillType(Colour(0xff4c4c4c)));
	}
	return drawable;
}




DrawablePath * getDockablePath(const int type, const bool on, const bool over)
{
	DrawablePath * drawable = new DrawablePath();

	Path path;

	static const unsigned char pathData[] = { 110,109,0,128,252,67,154,89,221,67,108,102,166,202,67,0,128,171,67,98,102,102,200,67,0,64,169,67,153,89,197,67,0,0,168,67,102,38,194,67,0,0,168,67,108,0,0,186,67,0,0,168,67,98,205,204,199,67,154,89,150,67,0,0,208,67,102,38,128,67,0,0,208,67,0,0,80,67,
98,0,0,208,67,51,51,186,66,51,115,161,67,0,0,0,0,0,0,80,67,0,0,0,0,98,52,51,186,66,0,0,0,0,0,0,0,0,51,51,186,66,0,0,0,0,0,0,80,67,98,0,0,0,0,51,115,161,67,51,51,186,66,0,0,208,67,0,0,80,67,0,0,208,67,98,102,38,128,67,0,0,208,67,154,89,150,67,205,204,
199,67,0,0,168,67,0,0,186,67,108,0,0,168,67,102,38,194,67,98,0,0,168,67,153,89,197,67,0,64,169,67,102,102,200,67,0,128,171,67,102,166,202,67,108,154,89,221,67,0,128,252,67,98,205,12,226,67,154,153,0,68,103,166,233,67,154,153,0,68,205,76,238,67,0,128,
252,67,108,51,115,252,67,154,89,238,67,98,51,147,0,68,103,166,233,67,51,147,0,68,205,12,226,67,0,128,252,67,154,89,221,67,99,109,0,0,80,67,0,0,168,67,98,205,76,9,67,0,0,168,67,0,0,160,66,102,102,139,67,0,0,160,66,0,0,80,67,98,0,0,160,66,205,76,9,67,51,
51,9,67,0,0,160,66,0,0,80,67,0,0,160,66,98,154,89,139,67,0,0,160,66,0,0,168,67,51,51,9,67,0,0,168,67,0,0,80,67,98,0,0,168,67,154,89,139,67,102,102,139,67,0,0,168,67,0,0,80,67,0,0,168,67,99,101,0,0 };


	path.loadPathFromData(pathData, sizeof(pathData));


	drawable->setPath(path);

	if (on)
	{
		if (over)
			drawable->setFill(FillType(Colour(0xffffffff)));
		else
			drawable->setFill(FillType(Colour(0xffcccccc)));
	}
	else
	{
		if (over)
			drawable->setFill(FillType(Colour(0xffffffff)));
		else
			drawable->setFill(FillType(Colour(0xffcccccc)));
	}
	return drawable;
}
/*
DrawablePath * getDockablePath(const int type, const bool on, const bool over);
{
	DrawablePath * drawable = new DrawablePath();

	Path path;
	switch (type)
	{
	case TOP:
		if (on)
		{
			for (int i = 0; i < 5; ++i)
			{
				Line<float> line(0.0f + (0.1f*i), 0.0f + (0.2f*i), 1.0f - (0.1f*i), 0.0f + (0.2f*i));
				path.addLineSegment(line, 0.05f);
			}
		}
		else
			path.addTriangle(0.0f, 1.0f, 1.0f, 1.0f, 0.5f, 0.0f);
		break;

	case LEFT:
		if (on)
		{
			for (int i = 0; i < 5; ++i)
			{
				Line<float> line(0.0f + (0.2f*i), 0.0f + (0.1f*i), 0.0f + (0.2f*i), 1.0f - (0.1f*i));
				path.addLineSegment(line, 0.05f);
			}
		}
		else
			path.addTriangle(0.0f, 0.5f, 1.0f, 1.0f, 1.0f, 0.0f);
		break;

	case RIGHT:
		if (on)
		{
			for (int i = 0; i < 5; ++i)
			{
				Line<float> line(1.0f - (0.2f*i), 0.0f + (0.1f*i), 1.0f - (0.2f*i), 1.0f - (0.1f*i));
				path.addLineSegment(line, 0.05f);
			}
		}
		else
			path.addTriangle(0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.5f);
		break;

	case BOTTOM:
		if (on)
		{
			for (int i = 0; i < 5; ++i)
			{
				Line<float> line(0.0f + (0.1f*i), 1.0f - (0.2f*i), 1.0f - (0.1f*i), 1.0f - (0.2f*i));
				path.addLineSegment(line, 0.05f);
			}
		}
		else
			path.addTriangle(0.0f, 0.0f, 1.0f, 0.0f, 0.5f, 1.0f);
		break;
	};
	drawable->setPath(path);

	if (on)
	{
		if (over)
			drawable->setFill(FillType(Colour(0xffcccccc)));
		else
			drawable->setFill(FillType(Colour(0xff999999)));
	}
	else
	{
		if (over)
			drawable->setFill(FillType(Colour(0xff999999)));
		else
			drawable->setFill(FillType(Colour(0xff4c4c4c)));
	}
	return drawable;
}
*/